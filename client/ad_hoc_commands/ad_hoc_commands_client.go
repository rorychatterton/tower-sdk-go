// Code generated by go-swagger; DO NOT EDIT.

package ad_hoc_commands

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ad hoc commands API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ad hoc commands API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AdHocCommandsAdHocCommandsActivityStreamList(params *AdHocCommandsAdHocCommandsActivityStreamListParams) (*AdHocCommandsAdHocCommandsActivityStreamListOK, error)

	AdHocCommandsAdHocCommandsCancelCreate(params *AdHocCommandsAdHocCommandsCancelCreateParams) (*AdHocCommandsAdHocCommandsCancelCreateCreated, error)

	AdHocCommandsAdHocCommandsCancelRead(params *AdHocCommandsAdHocCommandsCancelReadParams) (*AdHocCommandsAdHocCommandsCancelReadOK, error)

	AdHocCommandsAdHocCommandsCreate(params *AdHocCommandsAdHocCommandsCreateParams) (*AdHocCommandsAdHocCommandsCreateCreated, error)

	AdHocCommandsAdHocCommandsDelete(params *AdHocCommandsAdHocCommandsDeleteParams) (*AdHocCommandsAdHocCommandsDeleteNoContent, error)

	AdHocCommandsAdHocCommandsEventsList(params *AdHocCommandsAdHocCommandsEventsListParams) (*AdHocCommandsAdHocCommandsEventsListOK, error)

	AdHocCommandsAdHocCommandsList(params *AdHocCommandsAdHocCommandsListParams) (*AdHocCommandsAdHocCommandsListOK, error)

	AdHocCommandsAdHocCommandsNotificationsList(params *AdHocCommandsAdHocCommandsNotificationsListParams) (*AdHocCommandsAdHocCommandsNotificationsListOK, error)

	AdHocCommandsAdHocCommandsRead(params *AdHocCommandsAdHocCommandsReadParams) (*AdHocCommandsAdHocCommandsReadOK, error)

	AdHocCommandsAdHocCommandsRelaunchCreate(params *AdHocCommandsAdHocCommandsRelaunchCreateParams) (*AdHocCommandsAdHocCommandsRelaunchCreateCreated, error)

	AdHocCommandsAdHocCommandsRelaunchList(params *AdHocCommandsAdHocCommandsRelaunchListParams) (*AdHocCommandsAdHocCommandsRelaunchListOK, error)

	AdHocCommandsAdHocCommandsStdoutRead(params *AdHocCommandsAdHocCommandsStdoutReadParams) (*AdHocCommandsAdHocCommandsStdoutReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AdHocCommandsAdHocCommandsActivityStreamList lists activity streams for an ad hoc command


Make a GET request to this resource to retrieve a list of
activity streams associated with the selected
ad hoc command.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of activity streams
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more activity stream records.

## Results

Each activity stream data structure includes the following fields:

* `id`: Database ID for this activity stream. (integer)
* `type`: Data type for this activity stream. (choice)
* `url`: URL for this activity stream. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `timestamp`:  (datetime)
* `operation`: The action taken with respect to the given object(s). (choice)
    - `create`: Entity Created
    - `update`: Entity Updated
    - `delete`: Entity Deleted
    - `associate`: Entity Associated with another Entity
    - `disassociate`: Entity was Disassociated with another Entity
* `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json)
* `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string)
* `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string)
* `object_association`: When present, shows the field name of the role or relationship that changed. (field)
* `action_node`: The cluster node the activity took place on. (string)
* `object_type`: When present, shows the model on which the role or relationship was defined. (field)



## Sorting

To specify that activity streams are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) AdHocCommandsAdHocCommandsActivityStreamList(params *AdHocCommandsAdHocCommandsActivityStreamListParams) (*AdHocCommandsAdHocCommandsActivityStreamListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsActivityStreamListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_activity_stream_list",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/activity_stream/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsActivityStreamListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsActivityStreamListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_activity_stream_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsCancelCreate retrieves an ad hoc command


Make GET request to this resource to retrieve a single ad hoc command
record containing the following fields:

* `can_cancel`:  (boolean)
*/
func (a *Client) AdHocCommandsAdHocCommandsCancelCreate(params *AdHocCommandsAdHocCommandsCancelCreateParams) (*AdHocCommandsAdHocCommandsCancelCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsCancelCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_cancel_create",
		Method:             "POST",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/cancel/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsCancelCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsCancelCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_cancel_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsCancelRead retrieves an ad hoc command


Make GET request to this resource to retrieve a single ad hoc command
record containing the following fields:

* `can_cancel`:  (boolean)
*/
func (a *Client) AdHocCommandsAdHocCommandsCancelRead(params *AdHocCommandsAdHocCommandsCancelReadParams) (*AdHocCommandsAdHocCommandsCancelReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsCancelReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_cancel_read",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/cancel/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsCancelReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsCancelReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_cancel_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsCreate creates an ad hoc command


Make a POST request to this resource with the following ad hoc command
fields to create a new ad hoc command:




















* `job_type`:  (choice)
    - `run`: Run (default)
    - `check`: Check
* `inventory`:  (id, default=``)
* `limit`:  (string, default=`""`)
* `credential`:  (id, default=``)
* `module_name`:  (choice)
    - `command` (default)
    - `shell`
    - `yum`
    - `apt`
    - `apt_key`
    - `apt_repository`
    - `apt_rpm`
    - `service`
    - `group`
    - `user`
    - `mount`
    - `ping`
    - `selinux`
    - `setup`
    - `win_ping`
    - `win_service`
    - `win_updates`
    - `win_group`
    - `win_user`
* `module_args`:  (string, default=`""`)
* `forks`:  (integer, default=`0`)
* `verbosity`:  (choice)
    - `0`: 0 (Normal) (default)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `extra_vars`:  (string, default=`""`)
* `become_enabled`:  (boolean, default=`False`)
* `diff_mode`:  (boolean, default=`False`)
*/
func (a *Client) AdHocCommandsAdHocCommandsCreate(params *AdHocCommandsAdHocCommandsCreateParams) (*AdHocCommandsAdHocCommandsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_create",
		Method:             "POST",
		PathPattern:        "/api/v2/ad_hoc_commands/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsDelete deletes an ad hoc command


Make a DELETE request to this resource to delete this ad hoc command.
*/
func (a *Client) AdHocCommandsAdHocCommandsDelete(params *AdHocCommandsAdHocCommandsDeleteParams) (*AdHocCommandsAdHocCommandsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsEventsList lists ad hoc command events for an ad hoc command


Make a GET request to this resource to retrieve a list of
ad hoc command events associated with the selected
ad hoc command.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of ad hoc command events
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more ad hoc command event records.

## Results

Each ad hoc command event data structure includes the following fields:

* `id`: Database ID for this ad hoc command event. (integer)
* `type`: Data type for this ad hoc command event. (choice)
* `url`: URL for this ad hoc command event. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this ad hoc command event was created. (datetime)
* `modified`: Timestamp when this ad hoc command event was last modified. (datetime)
* `ad_hoc_command`:  (id)
* `event`:  (choice)
    - `runner_on_failed`: Host Failed
    - `runner_on_ok`: Host OK
    - `runner_on_unreachable`: Host Unreachable
    - `runner_on_skipped`: Host Skipped
    - `debug`: Debug
    - `verbose`: Verbose
    - `deprecated`: Deprecated
    - `warning`: Warning
    - `system_warning`: System Warning
    - `error`: Error
* `counter`:  (integer)
* `event_display`:  (string)
* `event_data`:  (json)
* `failed`:  (boolean)
* `changed`:  (boolean)
* `uuid`:  (string)
* `host`:  (id)
* `host_name`:  (string)
* `stdout`:  (string)
* `start_line`:  (integer)
* `end_line`:  (integer)
* `verbosity`:  (integer)



## Sorting

To specify that ad hoc command events are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) AdHocCommandsAdHocCommandsEventsList(params *AdHocCommandsAdHocCommandsEventsListParams) (*AdHocCommandsAdHocCommandsEventsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsEventsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_events_list",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/events/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsEventsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsEventsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_events_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsList lists ad hoc commands


Make a GET request to this resource to retrieve the list of
ad hoc commands.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of ad hoc commands
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more ad hoc command records.

## Results

Each ad hoc command data structure includes the following fields:

* `id`: Database ID for this ad hoc command. (integer)
* `type`: Data type for this ad hoc command. (choice)
* `url`: URL for this ad hoc command. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this ad hoc command was created. (datetime)
* `modified`: Timestamp when this ad hoc command was last modified. (datetime)
* `name`: Name of this ad hoc command. (string)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `execution_node`: The node the job executed on. (string)
* `controller_node`: The instance that managed the isolated execution environment. (string)
* `job_type`:  (choice)
    - `run`: Run
    - `check`: Check
* `inventory`:  (id)
* `limit`:  (string)
* `credential`:  (id)
* `module_name`:  (choice)
    - `command`
    - `shell`
    - `yum`
    - `apt`
    - `apt_key`
    - `apt_repository`
    - `apt_rpm`
    - `service`
    - `group`
    - `user`
    - `mount`
    - `ping`
    - `selinux`
    - `setup`
    - `win_ping`
    - `win_service`
    - `win_updates`
    - `win_group`
    - `win_user`
* `module_args`:  (string)
* `forks`:  (integer)
* `verbosity`:  (choice)
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `extra_vars`:  (string)
* `become_enabled`:  (boolean)
* `diff_mode`:  (boolean)



## Sorting

To specify that ad hoc commands are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) AdHocCommandsAdHocCommandsList(params *AdHocCommandsAdHocCommandsListParams) (*AdHocCommandsAdHocCommandsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_list",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_commands/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsNotificationsList lists notifications for an ad hoc command


Make a GET request to this resource to retrieve a list of
notifications associated with the selected
ad hoc command.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notifications
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification records.

## Results

Each notification data structure includes the following fields:

* `id`: Database ID for this notification. (integer)
* `type`: Data type for this notification. (choice)
* `url`: URL for this notification. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification was created. (datetime)
* `modified`: Timestamp when this notification was last modified. (datetime)
* `notification_template`:  (id)
* `error`:  (string)
* `status`:  (choice)
    - `pending`: Pending
    - `successful`: Successful
    - `failed`: Failed
* `notifications_sent`:  (integer)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `recipients`:  (string)
* `subject`:  (string)
* `body`: Notification body (json)



## Sorting

To specify that notifications are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) AdHocCommandsAdHocCommandsNotificationsList(params *AdHocCommandsAdHocCommandsNotificationsListParams) (*AdHocCommandsAdHocCommandsNotificationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsNotificationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_notifications_list",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/notifications/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsNotificationsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsNotificationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_notifications_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsRead retrieves an ad hoc command


Make GET request to this resource to retrieve a single ad hoc command
record containing the following fields:

* `id`: Database ID for this ad hoc command. (integer)
* `type`: Data type for this ad hoc command. (choice)
* `url`: URL for this ad hoc command. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this ad hoc command was created. (datetime)
* `modified`: Timestamp when this ad hoc command was last modified. (datetime)
* `name`: Name of this ad hoc command. (string)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_args`:  (string)
* `job_cwd`:  (string)
* `job_env`:  (json)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `execution_node`: The node the job executed on. (string)
* `controller_node`: The instance that managed the isolated execution environment. (string)
* `result_traceback`:  (string)
* `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean)
* `job_type`:  (choice)
    - `run`: Run
    - `check`: Check
* `inventory`:  (id)
* `limit`:  (string)
* `credential`:  (id)
* `module_name`:  (choice)
    - `command`
    - `shell`
    - `yum`
    - `apt`
    - `apt_key`
    - `apt_repository`
    - `apt_rpm`
    - `service`
    - `group`
    - `user`
    - `mount`
    - `ping`
    - `selinux`
    - `setup`
    - `win_ping`
    - `win_service`
    - `win_updates`
    - `win_group`
    - `win_user`
* `module_args`:  (string)
* `forks`:  (integer)
* `verbosity`:  (choice)
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `extra_vars`:  (string)
* `become_enabled`:  (boolean)
* `diff_mode`:  (boolean)
* `host_status_counts`: A count of hosts uniquely assigned to each status. (field)
*/
func (a *Client) AdHocCommandsAdHocCommandsRead(params *AdHocCommandsAdHocCommandsReadParams) (*AdHocCommandsAdHocCommandsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_read",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsRelaunchCreate relaunches an ad hoc command


Make a POST request to this resource to launch a job. If any passwords or variables are required then they should be passed in via POST data.   In order to determine what values are required in order to launch a job based on this job template you may make a GET request to this endpoint.
*/
func (a *Client) AdHocCommandsAdHocCommandsRelaunchCreate(params *AdHocCommandsAdHocCommandsRelaunchCreateParams) (*AdHocCommandsAdHocCommandsRelaunchCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsRelaunchCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_relaunch_create",
		Method:             "POST",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/relaunch/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsRelaunchCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsRelaunchCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_relaunch_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsRelaunchList relaunches an ad hoc command


Make a POST request to this resource to launch a job. If any passwords or variables are required then they should be passed in via POST data.   In order to determine what values are required in order to launch a job based on this job template you may make a GET request to this endpoint.
*/
func (a *Client) AdHocCommandsAdHocCommandsRelaunchList(params *AdHocCommandsAdHocCommandsRelaunchListParams) (*AdHocCommandsAdHocCommandsRelaunchListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsRelaunchListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_relaunch_list",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/relaunch/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsRelaunchListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsRelaunchListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_relaunch_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandsAdHocCommandsStdoutRead retrieves ad hoc command stdout


Make GET request to this resource to retrieve the stdout from running this
ad hoc command.

## Format

Use the `format` query string parameter to specify the output format.

* Browsable API: `?format=api`
* HTML: `?format=html`
* Plain Text: `?format=txt`
* Plain Text with ANSI color codes: `?format=ansi`
* JSON structure: `?format=json`
* Downloaded Plain Text: `?format=txt_download`
* Downloaded Plain Text with ANSI color codes: `?format=ansi_download`

(_New in Ansible Tower 2.0.0_) When using the Browsable API, HTML and JSON
formats, the `start_line` and `end_line` query string parameters can be used
to specify a range of line numbers to retrieve.

Use `dark=1` or `dark=0` as a query string parameter to force or disable a
dark background.

Files over 1.0 MB (configurable)
will not display in the browser. Use the `txt_download` or `ansi_download`
formats to download the file directly to view it.
*/
func (a *Client) AdHocCommandsAdHocCommandsStdoutRead(params *AdHocCommandsAdHocCommandsStdoutReadParams) (*AdHocCommandsAdHocCommandsStdoutReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandsAdHocCommandsStdoutReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Commands_ad_hoc_commands_stdout_read",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_commands/{id}/stdout/",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandsAdHocCommandsStdoutReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandsAdHocCommandsStdoutReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Commands_ad_hoc_commands_stdout_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

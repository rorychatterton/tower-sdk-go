// Code generated by go-swagger; DO NOT EDIT.

package inventory_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new inventory sources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventory sources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	InventorySourcesInventorySourcesActivityStreamList(params *InventorySourcesInventorySourcesActivityStreamListParams) (*InventorySourcesInventorySourcesActivityStreamListOK, error)

	InventorySourcesInventorySourcesCreate(params *InventorySourcesInventorySourcesCreateParams) (*InventorySourcesInventorySourcesCreateCreated, error)

	InventorySourcesInventorySourcesCredentialsCreate(params *InventorySourcesInventorySourcesCredentialsCreateParams) (*InventorySourcesInventorySourcesCredentialsCreateCreated, error)

	InventorySourcesInventorySourcesCredentialsList(params *InventorySourcesInventorySourcesCredentialsListParams) (*InventorySourcesInventorySourcesCredentialsListOK, error)

	InventorySourcesInventorySourcesDelete(params *InventorySourcesInventorySourcesDeleteParams) (*InventorySourcesInventorySourcesDeleteNoContent, error)

	InventorySourcesInventorySourcesGroupsDelete(params *InventorySourcesInventorySourcesGroupsDeleteParams) (*InventorySourcesInventorySourcesGroupsDeleteNoContent, error)

	InventorySourcesInventorySourcesGroupsList(params *InventorySourcesInventorySourcesGroupsListParams) (*InventorySourcesInventorySourcesGroupsListOK, error)

	InventorySourcesInventorySourcesHostsDelete(params *InventorySourcesInventorySourcesHostsDeleteParams) (*InventorySourcesInventorySourcesHostsDeleteNoContent, error)

	InventorySourcesInventorySourcesHostsList(params *InventorySourcesInventorySourcesHostsListParams) (*InventorySourcesInventorySourcesHostsListOK, error)

	InventorySourcesInventorySourcesInventoryUpdatesList(params *InventorySourcesInventorySourcesInventoryUpdatesListParams) (*InventorySourcesInventorySourcesInventoryUpdatesListOK, error)

	InventorySourcesInventorySourcesList(params *InventorySourcesInventorySourcesListParams) (*InventorySourcesInventorySourcesListOK, error)

	InventorySourcesInventorySourcesNotificationTemplatesErrorCreate(params *InventorySourcesInventorySourcesNotificationTemplatesErrorCreateParams) (*InventorySourcesInventorySourcesNotificationTemplatesErrorCreateCreated, error)

	InventorySourcesInventorySourcesNotificationTemplatesErrorList(params *InventorySourcesInventorySourcesNotificationTemplatesErrorListParams) (*InventorySourcesInventorySourcesNotificationTemplatesErrorListOK, error)

	InventorySourcesInventorySourcesNotificationTemplatesStartedCreate(params *InventorySourcesInventorySourcesNotificationTemplatesStartedCreateParams) (*InventorySourcesInventorySourcesNotificationTemplatesStartedCreateCreated, error)

	InventorySourcesInventorySourcesNotificationTemplatesStartedList(params *InventorySourcesInventorySourcesNotificationTemplatesStartedListParams) (*InventorySourcesInventorySourcesNotificationTemplatesStartedListOK, error)

	InventorySourcesInventorySourcesNotificationTemplatesSuccessCreate(params *InventorySourcesInventorySourcesNotificationTemplatesSuccessCreateParams) (*InventorySourcesInventorySourcesNotificationTemplatesSuccessCreateCreated, error)

	InventorySourcesInventorySourcesNotificationTemplatesSuccessList(params *InventorySourcesInventorySourcesNotificationTemplatesSuccessListParams) (*InventorySourcesInventorySourcesNotificationTemplatesSuccessListOK, error)

	InventorySourcesInventorySourcesPartialUpdate(params *InventorySourcesInventorySourcesPartialUpdateParams) (*InventorySourcesInventorySourcesPartialUpdateOK, error)

	InventorySourcesInventorySourcesRead(params *InventorySourcesInventorySourcesReadParams) (*InventorySourcesInventorySourcesReadOK, error)

	InventorySourcesInventorySourcesSchedulesCreate(params *InventorySourcesInventorySourcesSchedulesCreateParams) (*InventorySourcesInventorySourcesSchedulesCreateCreated, error)

	InventorySourcesInventorySourcesSchedulesList(params *InventorySourcesInventorySourcesSchedulesListParams) (*InventorySourcesInventorySourcesSchedulesListOK, error)

	InventorySourcesInventorySourcesUpdate0(params *InventorySourcesInventorySourcesUpdate0Params) (*InventorySourcesInventorySourcesUpdate0OK, error)

	InventorySourcesInventorySourcesUpdateCreate(params *InventorySourcesInventorySourcesUpdateCreateParams) (*InventorySourcesInventorySourcesUpdateCreateCreated, *InventorySourcesInventorySourcesUpdateCreateAccepted, error)

	InventorySourcesInventorySourcesUpdateRead(params *InventorySourcesInventorySourcesUpdateReadParams) (*InventorySourcesInventorySourcesUpdateReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  InventorySourcesInventorySourcesActivityStreamList lists activity streams for an inventory source


Make a GET request to this resource to retrieve a list of
activity streams associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of activity streams
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more activity stream records.

## Results

Each activity stream data structure includes the following fields:

* `id`: Database ID for this activity stream. (integer)
* `type`: Data type for this activity stream. (choice)
* `url`: URL for this activity stream. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `timestamp`:  (datetime)
* `operation`: The action taken with respect to the given object(s). (choice)
    - `create`: Entity Created
    - `update`: Entity Updated
    - `delete`: Entity Deleted
    - `associate`: Entity Associated with another Entity
    - `disassociate`: Entity was Disassociated with another Entity
* `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json)
* `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string)
* `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string)
* `object_association`: When present, shows the field name of the role or relationship that changed. (field)
* `action_node`: The cluster node the activity took place on. (string)
* `object_type`: When present, shows the model on which the role or relationship was defined. (field)



## Sorting

To specify that activity streams are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesActivityStreamList(params *InventorySourcesInventorySourcesActivityStreamListParams) (*InventorySourcesInventorySourcesActivityStreamListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesActivityStreamListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_activity_stream_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/activity_stream/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesActivityStreamListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesActivityStreamListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_activity_stream_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesCreate creates an inventory source


Make a POST request to this resource with the following inventory source
fields to create a new inventory source:









* `name`: Name of this inventory source. (string, required)
* `description`: Optional description of this inventory source. (string, default=`""`)
* `source`:  (choice)
    - `file`: File, Directory or Script
    - `scm`: Sourced from a Project
    - `ec2`: Amazon EC2
    - `gce`: Google Compute Engine
    - `azure_rm`: Microsoft Azure Resource Manager
    - `vmware`: VMware vCenter
    - `satellite6`: Red Hat Satellite 6
    - `cloudforms`: Red Hat CloudForms
    - `openstack`: OpenStack
    - `rhv`: Red Hat Virtualization
    - `tower`: Ansible Tower
    - `custom`: Custom Script
* `source_path`:  (string, default=`""`)
* `source_script`:  (id, default=``)
* `source_vars`: Inventory source variables in YAML or JSON format. (string, default=`""`)
* `credential`: Cloud credential to use for inventory updates. (integer, default=`None`)
* `source_regions`:  (string, default=`""`)
* `instance_filters`: Comma-separated list of filter expressions (EC2 only). Hosts are imported when ANY of the filters match. (string, default=`""`)
* `group_by`: Limit groups automatically created from inventory source (EC2 only). (string, default=`""`)
* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean, default=`False`)
* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean, default=`False`)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string, default=`""`)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`)
* `verbosity`:  (choice)
    - `0`: 0 (WARNING)
    - `1`: 1 (INFO) (default)
    - `2`: 2 (DEBUG)




* `inventory`:  (id, required)
* `update_on_launch`:  (boolean, default=`False`)
* `update_cache_timeout`:  (integer, default=`0`)
* `source_project`: Project containing inventory file used as source. (id, default=``)
* `update_on_project_update`:  (boolean, default=`False`)
*/
func (a *Client) InventorySourcesInventorySourcesCreate(params *InventorySourcesInventorySourcesCreateParams) (*InventorySourcesInventorySourcesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_create",
		Method:             "POST",
		PathPattern:        "/api/v2/inventory_sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesCredentialsCreate creates a credential for an inventory source


Make a POST request to this resource with the following credential
fields to create a new credential associated with this
inventory source.









* `name`: Name of this credential. (string, required)
* `description`: Optional description of this credential. (string, default=`""`)
* `organization`:  (id, default=`None`)
* `credential_type`: Specify the type of credential you want to create. Refer to the Ansible Tower documentation for details on each type. (id, required)
* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json, default=`{}`)











# Add Credentials for an Inventory Source:

Make a POST request to this resource with only an `id` field to associate an
existing credential with this inventory source.

# Remove Credentials from this Inventory Source:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the credential from this inventory source
 without deleting the credential.
*/
func (a *Client) InventorySourcesInventorySourcesCredentialsCreate(params *InventorySourcesInventorySourcesCredentialsCreateParams) (*InventorySourcesInventorySourcesCredentialsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesCredentialsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_credentials_create",
		Method:             "POST",
		PathPattern:        "/api/v2/inventory_sources/{id}/credentials/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesCredentialsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesCredentialsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_credentials_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesCredentialsList lists credentials for an inventory source


Make a GET request to this resource to retrieve a list of
credentials associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of credentials
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more credential records.

## Results

Each credential data structure includes the following fields:

* `id`: Database ID for this credential. (integer)
* `type`: Data type for this credential. (choice)
* `url`: URL for this credential. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this credential was created. (datetime)
* `modified`: Timestamp when this credential was last modified. (datetime)
* `name`: Name of this credential. (string)
* `description`: Optional description of this credential. (string)
* `organization`:  (id)
* `credential_type`: Specify the type of credential you want to create. Refer to the Ansible Tower documentation for details on each type. (id)
* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json)
* `kind`:  (field)
* `cloud`:  (field)
* `kubernetes`:  (field)



## Sorting

To specify that credentials are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesCredentialsList(params *InventorySourcesInventorySourcesCredentialsListParams) (*InventorySourcesInventorySourcesCredentialsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesCredentialsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_credentials_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/credentials/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesCredentialsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesCredentialsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_credentials_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesDelete deletes an inventory source


Make a DELETE request to this resource to delete this inventory source.
*/
func (a *Client) InventorySourcesInventorySourcesDelete(params *InventorySourcesInventorySourcesDeleteParams) (*InventorySourcesInventorySourcesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v2/inventory_sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesGroupsDelete creates a group for an inventory source


Make a POST request to this resource with the following group
fields to create a new group associated with this
inventory source.









* `name`: Name of this group. (string, required)
* `description`: Optional description of this group. (string, default=`""`)
* `inventory`:  (id, required)
* `variables`: Group variables in JSON or YAML format. (json, default=``)









# Delete all groups of this Inventory Source:

Make a DELETE request to this resource to delete all groups show in the list.
The Inventory Source will not be deleted by this request.
*/
func (a *Client) InventorySourcesInventorySourcesGroupsDelete(params *InventorySourcesInventorySourcesGroupsDeleteParams) (*InventorySourcesInventorySourcesGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesGroupsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_groups_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v2/inventory_sources/{id}/groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesGroupsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesGroupsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_groups_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesGroupsList lists groups for an inventory source


Make a GET request to this resource to retrieve a list of
groups associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of groups
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more group records.

## Results

Each group data structure includes the following fields:

* `id`: Database ID for this group. (integer)
* `type`: Data type for this group. (choice)
* `url`: URL for this group. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this group was created. (datetime)
* `modified`: Timestamp when this group was last modified. (datetime)
* `name`: Name of this group. (string)
* `description`: Optional description of this group. (string)
* `inventory`:  (id)
* `variables`: Group variables in JSON or YAML format. (json)



## Sorting

To specify that groups are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesGroupsList(params *InventorySourcesInventorySourcesGroupsListParams) (*InventorySourcesInventorySourcesGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_groups_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesGroupsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesGroupsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_groups_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesHostsDelete creates a host for an inventory source


Make a POST request to this resource with the following host
fields to create a new host associated with this
inventory source.









* `name`: Name of this host. (string, required)
* `description`: Optional description of this host. (string, default=`""`)
* `inventory`:  (id, required)
* `enabled`: Is this host online and available for running jobs? (boolean, default=`True`)
* `instance_id`: The value used by the remote inventory source to uniquely identify the host (string, default=`""`)
* `variables`: Host variables in JSON or YAML format. (json, default=``)















# Delete all hosts of this Inventory Source:

Make a DELETE request to this resource to delete all hosts show in the list.
The Inventory Source will not be deleted by this request.
*/
func (a *Client) InventorySourcesInventorySourcesHostsDelete(params *InventorySourcesInventorySourcesHostsDeleteParams) (*InventorySourcesInventorySourcesHostsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesHostsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_hosts_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v2/inventory_sources/{id}/hosts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesHostsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesHostsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_hosts_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesHostsList lists hosts for an inventory source


Make a GET request to this resource to retrieve a list of
hosts associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of hosts
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more host records.

## Results

Each host data structure includes the following fields:

* `id`: Database ID for this host. (integer)
* `type`: Data type for this host. (choice)
* `url`: URL for this host. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this host was created. (datetime)
* `modified`: Timestamp when this host was last modified. (datetime)
* `name`: Name of this host. (string)
* `description`: Optional description of this host. (string)
* `inventory`:  (id)
* `enabled`: Is this host online and available for running jobs? (boolean)
* `instance_id`: The value used by the remote inventory source to uniquely identify the host (string)
* `variables`: Host variables in JSON or YAML format. (json)
* `has_active_failures`:  (field)
* `has_inventory_sources`:  (field)
* `last_job`:  (id)
* `last_job_host_summary`:  (id)
* `insights_system_id`: Red Hat Insights host unique identifier. (string)
* `ansible_facts_modified`: The date and time ansible_facts was last modified. (datetime)



## Sorting

To specify that hosts are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesHostsList(params *InventorySourcesInventorySourcesHostsListParams) (*InventorySourcesInventorySourcesHostsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesHostsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_hosts_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/hosts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesHostsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesHostsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_hosts_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesInventoryUpdatesList lists inventory updates for an inventory source


Make a GET request to this resource to retrieve a list of
inventory updates associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of inventory updates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more inventory update records.

## Results

Each inventory update data structure includes the following fields:

* `id`: Database ID for this inventory update. (integer)
* `type`: Data type for this inventory update. (choice)
* `url`: URL for this inventory update. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this inventory update was created. (datetime)
* `modified`: Timestamp when this inventory update was last modified. (datetime)
* `name`: Name of this inventory update. (string)
* `description`: Optional description of this inventory update. (string)
* `unified_job_template`:  (id)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `execution_node`: The node the job executed on. (string)
* `source`:  (choice)
    - `file`: File, Directory or Script
    - `scm`: Sourced from a Project
    - `ec2`: Amazon EC2
    - `gce`: Google Compute Engine
    - `azure_rm`: Microsoft Azure Resource Manager
    - `vmware`: VMware vCenter
    - `satellite6`: Red Hat Satellite 6
    - `cloudforms`: Red Hat CloudForms
    - `openstack`: OpenStack
    - `rhv`: Red Hat Virtualization
    - `tower`: Ansible Tower
    - `custom`: Custom Script
* `source_path`:  (string)
* `source_script`:  (id)
* `source_vars`: Inventory source variables in YAML or JSON format. (string)
* `credential`: Cloud credential to use for inventory updates. (integer)
* `source_regions`:  (string)
* `instance_filters`: Comma-separated list of filter expressions (EC2 only). Hosts are imported when ANY of the filters match. (string)
* `group_by`: Limit groups automatically created from inventory source (EC2 only). (string)
* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean)
* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean)
* `custom_virtualenv`:  (string)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer)
* `verbosity`:  (choice)
    - `0`: 0 (WARNING)
    - `1`: 1 (INFO)
    - `2`: 2 (DEBUG)
* `inventory`:  (id)
* `inventory_source`:  (id)
* `license_error`:  (boolean)
* `org_host_limit_error`:  (boolean)
* `source_project_update`: Inventory files from this Project Update were used for the inventory update. (id)



## Sorting

To specify that inventory updates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesInventoryUpdatesList(params *InventorySourcesInventorySourcesInventoryUpdatesListParams) (*InventorySourcesInventorySourcesInventoryUpdatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesInventoryUpdatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_inventory_updates_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/inventory_updates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesInventoryUpdatesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesInventoryUpdatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_inventory_updates_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesList lists inventory sources


Make a GET request to this resource to retrieve the list of
inventory sources.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of inventory sources
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more inventory source records.

## Results

Each inventory source data structure includes the following fields:

* `id`: Database ID for this inventory source. (integer)
* `type`: Data type for this inventory source. (choice)
* `url`: URL for this inventory source. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this inventory source was created. (datetime)
* `modified`: Timestamp when this inventory source was last modified. (datetime)
* `name`: Name of this inventory source. (string)
* `description`: Optional description of this inventory source. (string)
* `source`:  (choice)
    - `file`: File, Directory or Script
    - `scm`: Sourced from a Project
    - `ec2`: Amazon EC2
    - `gce`: Google Compute Engine
    - `azure_rm`: Microsoft Azure Resource Manager
    - `vmware`: VMware vCenter
    - `satellite6`: Red Hat Satellite 6
    - `cloudforms`: Red Hat CloudForms
    - `openstack`: OpenStack
    - `rhv`: Red Hat Virtualization
    - `tower`: Ansible Tower
    - `custom`: Custom Script
* `source_path`:  (string)
* `source_script`:  (id)
* `source_vars`: Inventory source variables in YAML or JSON format. (string)
* `credential`: Cloud credential to use for inventory updates. (integer)
* `source_regions`:  (string)
* `instance_filters`: Comma-separated list of filter expressions (EC2 only). Hosts are imported when ANY of the filters match. (string)
* `group_by`: Limit groups automatically created from inventory source (EC2 only). (string)
* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean)
* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer)
* `verbosity`:  (choice)
    - `0`: 0 (WARNING)
    - `1`: 1 (INFO)
    - `2`: 2 (DEBUG)
* `last_job_run`:  (datetime)
* `last_job_failed`:  (boolean)
* `next_job_run`:  (datetime)
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
    - `never updated`: Never Updated
    - `none`: No External Source
* `inventory`:  (id)
* `update_on_launch`:  (boolean)
* `update_cache_timeout`:  (integer)
* `source_project`: Project containing inventory file used as source. (id)
* `update_on_project_update`:  (boolean)
* `last_update_failed`:  (boolean)
* `last_updated`:  (datetime)



## Sorting

To specify that inventory sources are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesList(params *InventorySourcesInventorySourcesListParams) (*InventorySourcesInventorySourcesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesNotificationTemplatesErrorCreate creates a notification template for an inventory source


Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
inventory source.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for an Inventory Source:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this inventory source.

# Remove Notification Templates from this Inventory Source:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this inventory source
 without deleting the notification template.
*/
func (a *Client) InventorySourcesInventorySourcesNotificationTemplatesErrorCreate(params *InventorySourcesInventorySourcesNotificationTemplatesErrorCreateParams) (*InventorySourcesInventorySourcesNotificationTemplatesErrorCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesNotificationTemplatesErrorCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_notification_templates_error_create",
		Method:             "POST",
		PathPattern:        "/api/v2/inventory_sources/{id}/notification_templates_error/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesNotificationTemplatesErrorCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesNotificationTemplatesErrorCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_notification_templates_error_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesNotificationTemplatesErrorList lists notification templates for an inventory source


Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesNotificationTemplatesErrorList(params *InventorySourcesInventorySourcesNotificationTemplatesErrorListParams) (*InventorySourcesInventorySourcesNotificationTemplatesErrorListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesNotificationTemplatesErrorListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_notification_templates_error_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/notification_templates_error/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesNotificationTemplatesErrorListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesNotificationTemplatesErrorListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_notification_templates_error_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesNotificationTemplatesStartedCreate creates a notification template for an inventory source


Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
inventory source.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for an Inventory Source:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this inventory source.

# Remove Notification Templates from this Inventory Source:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this inventory source
 without deleting the notification template.
*/
func (a *Client) InventorySourcesInventorySourcesNotificationTemplatesStartedCreate(params *InventorySourcesInventorySourcesNotificationTemplatesStartedCreateParams) (*InventorySourcesInventorySourcesNotificationTemplatesStartedCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesNotificationTemplatesStartedCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_notification_templates_started_create",
		Method:             "POST",
		PathPattern:        "/api/v2/inventory_sources/{id}/notification_templates_started/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesNotificationTemplatesStartedCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesNotificationTemplatesStartedCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_notification_templates_started_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesNotificationTemplatesStartedList lists notification templates for an inventory source


Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesNotificationTemplatesStartedList(params *InventorySourcesInventorySourcesNotificationTemplatesStartedListParams) (*InventorySourcesInventorySourcesNotificationTemplatesStartedListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesNotificationTemplatesStartedListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_notification_templates_started_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/notification_templates_started/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesNotificationTemplatesStartedListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesNotificationTemplatesStartedListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_notification_templates_started_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesNotificationTemplatesSuccessCreate creates a notification template for an inventory source


Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
inventory source.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for an Inventory Source:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this inventory source.

# Remove Notification Templates from this Inventory Source:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this inventory source
 without deleting the notification template.
*/
func (a *Client) InventorySourcesInventorySourcesNotificationTemplatesSuccessCreate(params *InventorySourcesInventorySourcesNotificationTemplatesSuccessCreateParams) (*InventorySourcesInventorySourcesNotificationTemplatesSuccessCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesNotificationTemplatesSuccessCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_notification_templates_success_create",
		Method:             "POST",
		PathPattern:        "/api/v2/inventory_sources/{id}/notification_templates_success/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesNotificationTemplatesSuccessCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesNotificationTemplatesSuccessCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_notification_templates_success_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesNotificationTemplatesSuccessList lists notification templates for an inventory source


Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesNotificationTemplatesSuccessList(params *InventorySourcesInventorySourcesNotificationTemplatesSuccessListParams) (*InventorySourcesInventorySourcesNotificationTemplatesSuccessListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesNotificationTemplatesSuccessListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_notification_templates_success_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/notification_templates_success/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesNotificationTemplatesSuccessListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesNotificationTemplatesSuccessListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_notification_templates_success_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesPartialUpdate updates an inventory source


Make a PUT or PATCH request to this resource to update this
inventory source.  The following fields may be modified:









* `name`: Name of this inventory source. (string, required)
* `description`: Optional description of this inventory source. (string, default=`""`)
* `source`:  (choice)
    - `file`: File, Directory or Script
    - `scm`: Sourced from a Project
    - `ec2`: Amazon EC2
    - `gce`: Google Compute Engine
    - `azure_rm`: Microsoft Azure Resource Manager
    - `vmware`: VMware vCenter
    - `satellite6`: Red Hat Satellite 6
    - `cloudforms`: Red Hat CloudForms
    - `openstack`: OpenStack
    - `rhv`: Red Hat Virtualization
    - `tower`: Ansible Tower
    - `custom`: Custom Script
* `source_path`:  (string, default=`""`)
* `source_script`:  (id, default=``)
* `source_vars`: Inventory source variables in YAML or JSON format. (string, default=`""`)
* `credential`: Cloud credential to use for inventory updates. (integer, default=`None`)
* `source_regions`:  (string, default=`""`)
* `instance_filters`: Comma-separated list of filter expressions (EC2 only). Hosts are imported when ANY of the filters match. (string, default=`""`)
* `group_by`: Limit groups automatically created from inventory source (EC2 only). (string, default=`""`)
* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean, default=`False`)
* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean, default=`False`)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string, default=`""`)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`)
* `verbosity`:  (choice)
    - `0`: 0 (WARNING)
    - `1`: 1 (INFO) (default)
    - `2`: 2 (DEBUG)




* `inventory`:  (id, required)
* `update_on_launch`:  (boolean, default=`False`)
* `update_cache_timeout`:  (integer, default=`0`)
* `source_project`: Project containing inventory file used as source. (id, default=``)
* `update_on_project_update`:  (boolean, default=`False`)










For a PATCH request, include only the fields that are being modified.
*/
func (a *Client) InventorySourcesInventorySourcesPartialUpdate(params *InventorySourcesInventorySourcesPartialUpdateParams) (*InventorySourcesInventorySourcesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v2/inventory_sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesRead retrieves an inventory source


Make GET request to this resource to retrieve a single inventory source
record containing the following fields:

* `id`: Database ID for this inventory source. (integer)
* `type`: Data type for this inventory source. (choice)
* `url`: URL for this inventory source. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this inventory source was created. (datetime)
* `modified`: Timestamp when this inventory source was last modified. (datetime)
* `name`: Name of this inventory source. (string)
* `description`: Optional description of this inventory source. (string)
* `source`:  (choice)
    - `file`: File, Directory or Script
    - `scm`: Sourced from a Project
    - `ec2`: Amazon EC2
    - `gce`: Google Compute Engine
    - `azure_rm`: Microsoft Azure Resource Manager
    - `vmware`: VMware vCenter
    - `satellite6`: Red Hat Satellite 6
    - `cloudforms`: Red Hat CloudForms
    - `openstack`: OpenStack
    - `rhv`: Red Hat Virtualization
    - `tower`: Ansible Tower
    - `custom`: Custom Script
* `source_path`:  (string)
* `source_script`:  (id)
* `source_vars`: Inventory source variables in YAML or JSON format. (string)
* `credential`: Cloud credential to use for inventory updates. (integer)
* `source_regions`:  (string)
* `instance_filters`: Comma-separated list of filter expressions (EC2 only). Hosts are imported when ANY of the filters match. (string)
* `group_by`: Limit groups automatically created from inventory source (EC2 only). (string)
* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean)
* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer)
* `verbosity`:  (choice)
    - `0`: 0 (WARNING)
    - `1`: 1 (INFO)
    - `2`: 2 (DEBUG)
* `last_job_run`:  (datetime)
* `last_job_failed`:  (boolean)
* `next_job_run`:  (datetime)
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
    - `never updated`: Never Updated
    - `none`: No External Source
* `inventory`:  (id)
* `update_on_launch`:  (boolean)
* `update_cache_timeout`:  (integer)
* `source_project`: Project containing inventory file used as source. (id)
* `update_on_project_update`:  (boolean)
* `last_update_failed`:  (boolean)
* `last_updated`:  (datetime)
*/
func (a *Client) InventorySourcesInventorySourcesRead(params *InventorySourcesInventorySourcesReadParams) (*InventorySourcesInventorySourcesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_read",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesSchedulesCreate creates a schedule for an inventory source


Make a POST request to this resource with the following schedule
fields to create a new schedule associated with this
inventory source.


* `rrule`: A value representing the schedules iCal recurrence rule. (string, required)







* `name`: Name of this schedule. (string, required)
* `description`: Optional description of this schedule. (string, default=`""`)
* `extra_data`:  (json, default=`{}`)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``)
* `scm_branch`:  (string, default=`""`)
* `job_type`:  (choice)
    - `None`: --------- (default)
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string, default=`""`)
* `skip_tags`:  (string, default=`""`)
* `limit`:  (string, default=`""`)
* `diff_mode`:  (boolean, default=`None`)
* `verbosity`:  (choice)
    - `None`: --------- (default)
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)

* `enabled`: Enables processing of this schedule. (boolean, default=`True`)











POST requests to this resource must include a proper `rrule` value following
a particular format and conforming to subset of allowed rules.

The following lists the expected format and details of our rrules:

* DTSTART is required and must follow the following format: DTSTART:YYYYMMDDTHHMMSSZ
* DTSTART is expected to be in UTC
* INTERVAL is required
* SECONDLY is not supported
* TZID is not supported
* RRULE must precede the rule statements
* BYDAY is supported but not BYDAY with a numerical prefix
* BYYEARDAY and BYWEEKNO are not supported
* Only one rrule statement per schedule is supported
* COUNT must be < 1000

Here are some example rrules:

    "DTSTART:20500331T055000Z RRULE:FREQ=MINUTELY;INTERVAL=10;COUNT=5"
    "DTSTART:20240331T075000Z RRULE:FREQ=DAILY;INTERVAL=1;COUNT=1"
    "DTSTART:20140331T075000Z RRULE:FREQ=MINUTELY;INTERVAL=1;UNTIL=20230401T075000Z"
    "DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR"
    "DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO"
    "DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYMONTHDAY=6"
    "DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=4;BYDAY=SU"
    "DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=-1;BYDAY=MO,TU,WE,TH,FR"
    "DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=-1;BYDAY=MO,TU,WE,TH,FR,SA,SU"
    "DTSTART:20140331T075000Z RRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=4;BYMONTHDAY=1"
    "DTSTART:20140331T075000Z RRULE:FREQ=YEARLY;INTERVAL=1;BYSETPOS=-1;BYMONTH=8;BYDAY=SU"
    "DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=1;UNTIL=20230401T075000Z;BYDAY=MO,WE,FR"
    "DTSTART:20140331T075000Z RRULE:FREQ=HOURLY;INTERVAL=1;UNTIL=20230610T075000Z"
*/
func (a *Client) InventorySourcesInventorySourcesSchedulesCreate(params *InventorySourcesInventorySourcesSchedulesCreateParams) (*InventorySourcesInventorySourcesSchedulesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesSchedulesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_schedules_create",
		Method:             "POST",
		PathPattern:        "/api/v2/inventory_sources/{id}/schedules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesSchedulesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesSchedulesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_schedules_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesSchedulesList lists schedules for an inventory source


Make a GET request to this resource to retrieve a list of
schedules associated with the selected
inventory source.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of schedules
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more schedule records.

## Results

Each schedule data structure includes the following fields:

* `rrule`: A value representing the schedules iCal recurrence rule. (string)
* `id`: Database ID for this schedule. (integer)
* `type`: Data type for this schedule. (choice)
* `url`: URL for this schedule. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this schedule was created. (datetime)
* `modified`: Timestamp when this schedule was last modified. (datetime)
* `name`: Name of this schedule. (string)
* `description`: Optional description of this schedule. (string)
* `extra_data`:  (json)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id)
* `scm_branch`:  (string)
* `job_type`:  (choice)
    - `None`: ---------
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string)
* `skip_tags`:  (string)
* `limit`:  (string)
* `diff_mode`:  (boolean)
* `verbosity`:  (choice)
    - `None`: ---------
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `unified_job_template`:  (id)
* `enabled`: Enables processing of this schedule. (boolean)
* `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime)
* `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime)
* `next_run`: The next time that the scheduled action will run. (datetime)
* `timezone`:  (field)
* `until`:  (field)



## Sorting

To specify that schedules are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) InventorySourcesInventorySourcesSchedulesList(params *InventorySourcesInventorySourcesSchedulesListParams) (*InventorySourcesInventorySourcesSchedulesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesSchedulesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_schedules_list",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/schedules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesSchedulesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesSchedulesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_schedules_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesUpdate0 updates an inventory source


Make a PUT or PATCH request to this resource to update this
inventory source.  The following fields may be modified:









* `name`: Name of this inventory source. (string, required)
* `description`: Optional description of this inventory source. (string, default=`""`)
* `source`:  (choice)
    - `file`: File, Directory or Script
    - `scm`: Sourced from a Project
    - `ec2`: Amazon EC2
    - `gce`: Google Compute Engine
    - `azure_rm`: Microsoft Azure Resource Manager
    - `vmware`: VMware vCenter
    - `satellite6`: Red Hat Satellite 6
    - `cloudforms`: Red Hat CloudForms
    - `openstack`: OpenStack
    - `rhv`: Red Hat Virtualization
    - `tower`: Ansible Tower
    - `custom`: Custom Script
* `source_path`:  (string, default=`""`)
* `source_script`:  (id, default=``)
* `source_vars`: Inventory source variables in YAML or JSON format. (string, default=`""`)
* `credential`: Cloud credential to use for inventory updates. (integer, default=`None`)
* `source_regions`:  (string, default=`""`)
* `instance_filters`: Comma-separated list of filter expressions (EC2 only). Hosts are imported when ANY of the filters match. (string, default=`""`)
* `group_by`: Limit groups automatically created from inventory source (EC2 only). (string, default=`""`)
* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean, default=`False`)
* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean, default=`False`)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string, default=`""`)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`)
* `verbosity`:  (choice)
    - `0`: 0 (WARNING)
    - `1`: 1 (INFO) (default)
    - `2`: 2 (DEBUG)




* `inventory`:  (id, required)
* `update_on_launch`:  (boolean, default=`False`)
* `update_cache_timeout`:  (integer, default=`0`)
* `source_project`: Project containing inventory file used as source. (id, default=``)
* `update_on_project_update`:  (boolean, default=`False`)








For a PUT request, include **all** fields in the request.
*/
func (a *Client) InventorySourcesInventorySourcesUpdate0(params *InventorySourcesInventorySourcesUpdate0Params) (*InventorySourcesInventorySourcesUpdate0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesUpdate0Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_update_0",
		Method:             "PUT",
		PathPattern:        "/api/v2/inventory_sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesUpdate0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesUpdate0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_update_0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesUpdateCreate updates inventory source


Make a GET request to this resource to determine if the group can be updated
from its inventory source.  The response will include the following field:

* `can_update`: Flag indicating if this inventory source can be updated
  (boolean, read-only)

Make a POST request to this resource to update the inventory source.  If
successful, the response status code will be 202.  If the inventory source is
not defined or cannot be updated, a 405 status code will be returned.
*/
func (a *Client) InventorySourcesInventorySourcesUpdateCreate(params *InventorySourcesInventorySourcesUpdateCreateParams) (*InventorySourcesInventorySourcesUpdateCreateCreated, *InventorySourcesInventorySourcesUpdateCreateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesUpdateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_update_create",
		Method:             "POST",
		PathPattern:        "/api/v2/inventory_sources/{id}/update/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesUpdateCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InventorySourcesInventorySourcesUpdateCreateCreated:
		return value, nil, nil
	case *InventorySourcesInventorySourcesUpdateCreateAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inventory_sources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventorySourcesInventorySourcesUpdateRead updates inventory source


Make a GET request to this resource to determine if the group can be updated
from its inventory source.  The response will include the following field:

* `can_update`: Flag indicating if this inventory source can be updated
  (boolean, read-only)

Make a POST request to this resource to update the inventory source.  If
successful, the response status code will be 202.  If the inventory source is
not defined or cannot be updated, a 405 status code will be returned.
*/
func (a *Client) InventorySourcesInventorySourcesUpdateRead(params *InventorySourcesInventorySourcesUpdateReadParams) (*InventorySourcesInventorySourcesUpdateReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventorySourcesInventorySourcesUpdateReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inventory Sources_inventory_sources_update_read",
		Method:             "GET",
		PathPattern:        "/api/v2/inventory_sources/{id}/update/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventorySourcesInventorySourcesUpdateReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventorySourcesInventorySourcesUpdateReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inventory Sources_inventory_sources_update_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package workflow_approvals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workflow approvals API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow approvals API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	WorkflowApprovalsWorkflowApprovalsApproveCreate(params *WorkflowApprovalsWorkflowApprovalsApproveCreateParams) (*WorkflowApprovalsWorkflowApprovalsApproveCreateCreated, error)

	WorkflowApprovalsWorkflowApprovalsApproveRead(params *WorkflowApprovalsWorkflowApprovalsApproveReadParams) (*WorkflowApprovalsWorkflowApprovalsApproveReadOK, error)

	WorkflowApprovalsWorkflowApprovalsCreate(params *WorkflowApprovalsWorkflowApprovalsCreateParams) (*WorkflowApprovalsWorkflowApprovalsCreateCreated, error)

	WorkflowApprovalsWorkflowApprovalsDelete(params *WorkflowApprovalsWorkflowApprovalsDeleteParams) (*WorkflowApprovalsWorkflowApprovalsDeleteNoContent, error)

	WorkflowApprovalsWorkflowApprovalsDenyCreate(params *WorkflowApprovalsWorkflowApprovalsDenyCreateParams) (*WorkflowApprovalsWorkflowApprovalsDenyCreateCreated, error)

	WorkflowApprovalsWorkflowApprovalsDenyRead(params *WorkflowApprovalsWorkflowApprovalsDenyReadParams) (*WorkflowApprovalsWorkflowApprovalsDenyReadOK, error)

	WorkflowApprovalsWorkflowApprovalsList(params *WorkflowApprovalsWorkflowApprovalsListParams) (*WorkflowApprovalsWorkflowApprovalsListOK, error)

	WorkflowApprovalsWorkflowApprovalsRead(params *WorkflowApprovalsWorkflowApprovalsReadParams) (*WorkflowApprovalsWorkflowApprovalsReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  WorkflowApprovalsWorkflowApprovalsApproveCreate retrieves a workflow approval


Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:
*/
func (a *Client) WorkflowApprovalsWorkflowApprovalsApproveCreate(params *WorkflowApprovalsWorkflowApprovalsApproveCreateParams) (*WorkflowApprovalsWorkflowApprovalsApproveCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowApprovalsWorkflowApprovalsApproveCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Workflow Approvals_workflow_approvals_approve_create",
		Method:             "POST",
		PathPattern:        "/api/v2/workflow_approvals/{id}/approve/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowApprovalsWorkflowApprovalsApproveCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowApprovalsWorkflowApprovalsApproveCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workflow Approvals_workflow_approvals_approve_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowApprovalsWorkflowApprovalsApproveRead retrieves a workflow approval


Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:
*/
func (a *Client) WorkflowApprovalsWorkflowApprovalsApproveRead(params *WorkflowApprovalsWorkflowApprovalsApproveReadParams) (*WorkflowApprovalsWorkflowApprovalsApproveReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowApprovalsWorkflowApprovalsApproveReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Workflow Approvals_workflow_approvals_approve_read",
		Method:             "GET",
		PathPattern:        "/api/v2/workflow_approvals/{id}/approve/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowApprovalsWorkflowApprovalsApproveReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowApprovalsWorkflowApprovalsApproveReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workflow Approvals_workflow_approvals_approve_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowApprovalsWorkflowApprovalsCreate creates a workflow approval


Make a POST request to this resource with the following workflow approval
fields to create a new workflow approval:









* `name`: Name of this workflow approval. (string, required)
* `description`: Optional description of this workflow approval. (string, default=`""`)
*/
func (a *Client) WorkflowApprovalsWorkflowApprovalsCreate(params *WorkflowApprovalsWorkflowApprovalsCreateParams) (*WorkflowApprovalsWorkflowApprovalsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowApprovalsWorkflowApprovalsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Workflow Approvals_workflow_approvals_create",
		Method:             "POST",
		PathPattern:        "/api/v2/workflow_approvals/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowApprovalsWorkflowApprovalsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowApprovalsWorkflowApprovalsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workflow Approvals_workflow_approvals_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowApprovalsWorkflowApprovalsDelete deletes a workflow approval


Make a DELETE request to this resource to delete this workflow approval.
*/
func (a *Client) WorkflowApprovalsWorkflowApprovalsDelete(params *WorkflowApprovalsWorkflowApprovalsDeleteParams) (*WorkflowApprovalsWorkflowApprovalsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowApprovalsWorkflowApprovalsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Workflow Approvals_workflow_approvals_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v2/workflow_approvals/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowApprovalsWorkflowApprovalsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowApprovalsWorkflowApprovalsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workflow Approvals_workflow_approvals_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowApprovalsWorkflowApprovalsDenyCreate retrieves a workflow approval


Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:
*/
func (a *Client) WorkflowApprovalsWorkflowApprovalsDenyCreate(params *WorkflowApprovalsWorkflowApprovalsDenyCreateParams) (*WorkflowApprovalsWorkflowApprovalsDenyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowApprovalsWorkflowApprovalsDenyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Workflow Approvals_workflow_approvals_deny_create",
		Method:             "POST",
		PathPattern:        "/api/v2/workflow_approvals/{id}/deny/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowApprovalsWorkflowApprovalsDenyCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowApprovalsWorkflowApprovalsDenyCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workflow Approvals_workflow_approvals_deny_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowApprovalsWorkflowApprovalsDenyRead retrieves a workflow approval


Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:
*/
func (a *Client) WorkflowApprovalsWorkflowApprovalsDenyRead(params *WorkflowApprovalsWorkflowApprovalsDenyReadParams) (*WorkflowApprovalsWorkflowApprovalsDenyReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowApprovalsWorkflowApprovalsDenyReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Workflow Approvals_workflow_approvals_deny_read",
		Method:             "GET",
		PathPattern:        "/api/v2/workflow_approvals/{id}/deny/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowApprovalsWorkflowApprovalsDenyReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowApprovalsWorkflowApprovalsDenyReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workflow Approvals_workflow_approvals_deny_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowApprovalsWorkflowApprovalsList lists workflow approvals


Make a GET request to this resource to retrieve the list of
workflow approvals.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of workflow approvals
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more workflow approval records.

## Results

Each workflow approval data structure includes the following fields:

* `id`: Database ID for this workflow approval. (integer)
* `type`: Data type for this workflow approval. (choice)
* `url`: URL for this workflow approval. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow approval was created. (datetime)
* `modified`: Timestamp when this workflow approval was last modified. (datetime)
* `name`: Name of this workflow approval. (string)
* `description`: Optional description of this workflow approval. (string)
* `unified_job_template`:  (id)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `can_approve_or_deny`:  (field)
* `approval_expiration`:  (field)
* `timed_out`:  (boolean)



## Sorting

To specify that workflow approvals are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) WorkflowApprovalsWorkflowApprovalsList(params *WorkflowApprovalsWorkflowApprovalsListParams) (*WorkflowApprovalsWorkflowApprovalsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowApprovalsWorkflowApprovalsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Workflow Approvals_workflow_approvals_list",
		Method:             "GET",
		PathPattern:        "/api/v2/workflow_approvals/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowApprovalsWorkflowApprovalsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowApprovalsWorkflowApprovalsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workflow Approvals_workflow_approvals_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowApprovalsWorkflowApprovalsRead retrieves a workflow approval


Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:

* `id`: Database ID for this workflow approval. (integer)
* `type`: Data type for this workflow approval. (choice)
* `url`: URL for this workflow approval. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow approval was created. (datetime)
* `modified`: Timestamp when this workflow approval was last modified. (datetime)
* `name`: Name of this workflow approval. (string)
* `description`: Optional description of this workflow approval. (string)
* `unified_job_template`:  (id)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_args`:  (string)
* `job_cwd`:  (string)
* `job_env`:  (json)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `result_traceback`:  (string)
* `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean)
* `can_approve_or_deny`:  (field)
* `approval_expiration`:  (field)
* `timed_out`:  (boolean)
*/
func (a *Client) WorkflowApprovalsWorkflowApprovalsRead(params *WorkflowApprovalsWorkflowApprovalsReadParams) (*WorkflowApprovalsWorkflowApprovalsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowApprovalsWorkflowApprovalsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Workflow Approvals_workflow_approvals_read",
		Method:             "GET",
		PathPattern:        "/api/v2/workflow_approvals/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowApprovalsWorkflowApprovalsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowApprovalsWorkflowApprovalsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Workflow Approvals_workflow_approvals_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

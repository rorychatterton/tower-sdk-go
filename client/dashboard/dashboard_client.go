// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dashboard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dashboard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DashboardDashboardGraphsJobsList(params *DashboardDashboardGraphsJobsListParams) (*DashboardDashboardGraphsJobsListOK, error)

	DashboardDashboardList(params *DashboardDashboardListParams) (*DashboardDashboardListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DashboardDashboardGraphsJobsList views statistics for job runs


Make a GET request to this resource to retrieve aggregate statistics about job runs suitable for graphing.

## Parmeters and Filtering

The `period` of the data can be adjusted with:

    ?period=month

Where `month` can be replaced with `week`, or `day`.  `month` is the default.

The type of job can be filtered with:

    ?job_type=all

Where `all` can be replaced with `inv_sync`, `playbook_run` or `scm_update`.  `all` is the default.

## Results

Data will be returned in the following format:

    "jobs": {
            "successful": [
                [
                    1402808400.0,
                    9
                ], ... ],
            "failed": [
    	        [
                    1402808400.0,
                    3
                ], ... ]
    }

Each element contains an epoch timestamp represented in seconds and a numerical value indicating
the number of events during that time period
*/
func (a *Client) DashboardDashboardGraphsJobsList(params *DashboardDashboardGraphsJobsListParams) (*DashboardDashboardGraphsJobsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardDashboardGraphsJobsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Dashboard_dashboard_graphs_jobs_list",
		Method:             "GET",
		PathPattern:        "/api/v2/dashboard/graphs/jobs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DashboardDashboardGraphsJobsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DashboardDashboardGraphsJobsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Dashboard_dashboard_graphs_jobs_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DashboardDashboardList shows dashboard details
*/
func (a *Client) DashboardDashboardList(params *DashboardDashboardListParams) (*DashboardDashboardListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardDashboardListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Dashboard_dashboard_list",
		Method:             "GET",
		PathPattern:        "/api/v2/dashboard/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DashboardDashboardListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DashboardDashboardListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Dashboard_dashboard_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

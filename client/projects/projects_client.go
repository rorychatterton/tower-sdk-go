// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectsProjectsAccessListList(params *ProjectsProjectsAccessListListParams) (*ProjectsProjectsAccessListListOK, error)

	ProjectsProjectsActivityStreamList(params *ProjectsProjectsActivityStreamListParams) (*ProjectsProjectsActivityStreamListOK, error)

	ProjectsProjectsCopyCreate(params *ProjectsProjectsCopyCreateParams) (*ProjectsProjectsCopyCreateCreated, error)

	ProjectsProjectsCopyList(params *ProjectsProjectsCopyListParams) (*ProjectsProjectsCopyListOK, error)

	ProjectsProjectsCreate(params *ProjectsProjectsCreateParams) (*ProjectsProjectsCreateCreated, error)

	ProjectsProjectsDelete(params *ProjectsProjectsDeleteParams) (*ProjectsProjectsDeleteNoContent, error)

	ProjectsProjectsInventoriesRead(params *ProjectsProjectsInventoriesReadParams) (*ProjectsProjectsInventoriesReadOK, error)

	ProjectsProjectsList(params *ProjectsProjectsListParams) (*ProjectsProjectsListOK, error)

	ProjectsProjectsNotificationTemplatesErrorCreate(params *ProjectsProjectsNotificationTemplatesErrorCreateParams) (*ProjectsProjectsNotificationTemplatesErrorCreateCreated, error)

	ProjectsProjectsNotificationTemplatesErrorList(params *ProjectsProjectsNotificationTemplatesErrorListParams) (*ProjectsProjectsNotificationTemplatesErrorListOK, error)

	ProjectsProjectsNotificationTemplatesStartedCreate(params *ProjectsProjectsNotificationTemplatesStartedCreateParams) (*ProjectsProjectsNotificationTemplatesStartedCreateCreated, error)

	ProjectsProjectsNotificationTemplatesStartedList(params *ProjectsProjectsNotificationTemplatesStartedListParams) (*ProjectsProjectsNotificationTemplatesStartedListOK, error)

	ProjectsProjectsNotificationTemplatesSuccessCreate(params *ProjectsProjectsNotificationTemplatesSuccessCreateParams) (*ProjectsProjectsNotificationTemplatesSuccessCreateCreated, error)

	ProjectsProjectsNotificationTemplatesSuccessList(params *ProjectsProjectsNotificationTemplatesSuccessListParams) (*ProjectsProjectsNotificationTemplatesSuccessListOK, error)

	ProjectsProjectsObjectRolesList(params *ProjectsProjectsObjectRolesListParams) (*ProjectsProjectsObjectRolesListOK, error)

	ProjectsProjectsPartialUpdate(params *ProjectsProjectsPartialUpdateParams) (*ProjectsProjectsPartialUpdateOK, error)

	ProjectsProjectsPlaybooksRead(params *ProjectsProjectsPlaybooksReadParams) (*ProjectsProjectsPlaybooksReadOK, error)

	ProjectsProjectsProjectUpdatesList(params *ProjectsProjectsProjectUpdatesListParams) (*ProjectsProjectsProjectUpdatesListOK, error)

	ProjectsProjectsRead(params *ProjectsProjectsReadParams) (*ProjectsProjectsReadOK, error)

	ProjectsProjectsSchedulesCreate(params *ProjectsProjectsSchedulesCreateParams) (*ProjectsProjectsSchedulesCreateCreated, error)

	ProjectsProjectsSchedulesList(params *ProjectsProjectsSchedulesListParams) (*ProjectsProjectsSchedulesListOK, error)

	ProjectsProjectsScmInventorySourcesList(params *ProjectsProjectsScmInventorySourcesListParams) (*ProjectsProjectsScmInventorySourcesListOK, error)

	ProjectsProjectsTeamsList(params *ProjectsProjectsTeamsListParams) (*ProjectsProjectsTeamsListOK, error)

	ProjectsProjectsUpdate0(params *ProjectsProjectsUpdate0Params) (*ProjectsProjectsUpdate0OK, error)

	ProjectsProjectsUpdateCreate(params *ProjectsProjectsUpdateCreateParams) (*ProjectsProjectsUpdateCreateCreated, error)

	ProjectsProjectsUpdateRead(params *ProjectsProjectsUpdateReadParams) (*ProjectsProjectsUpdateReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectsProjectsAccessListList lists users


Make a GET request to this resource to retrieve the list of
users.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of users
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more user records.

## Results

Each user data structure includes the following fields:

* `id`: Database ID for this user. (integer)
* `type`: Data type for this user. (choice)
* `url`: URL for this user. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this user was created. (datetime)
* `username`: Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (string)
* `first_name`:  (string)
* `last_name`:  (string)
* `email`:  (string)
* `is_superuser`: Designates that this user has all permissions without explicitly assigning them. (boolean)
* `is_system_auditor`:  (boolean)

* `ldap_dn`:  (string)
* `last_login`:  (datetime)
* `external_account`: Set if the account is managed by an external service (field)



## Sorting

To specify that users are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=username

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-username

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=username,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsAccessListList(params *ProjectsProjectsAccessListListParams) (*ProjectsProjectsAccessListListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsAccessListListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_access_list_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/access_list/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsAccessListListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsAccessListListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_access_list_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsActivityStreamList lists activity streams for a project


Make a GET request to this resource to retrieve a list of
activity streams associated with the selected
project.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of activity streams
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more activity stream records.

## Results

Each activity stream data structure includes the following fields:

* `id`: Database ID for this activity stream. (integer)
* `type`: Data type for this activity stream. (choice)
* `url`: URL for this activity stream. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `timestamp`:  (datetime)
* `operation`: The action taken with respect to the given object(s). (choice)
    - `create`: Entity Created
    - `update`: Entity Updated
    - `delete`: Entity Deleted
    - `associate`: Entity Associated with another Entity
    - `disassociate`: Entity was Disassociated with another Entity
* `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json)
* `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string)
* `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string)
* `object_association`: When present, shows the field name of the role or relationship that changed. (field)
* `action_node`: The cluster node the activity took place on. (string)
* `object_type`: When present, shows the model on which the role or relationship was defined. (field)



## Sorting

To specify that activity streams are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsActivityStreamList(params *ProjectsProjectsActivityStreamListParams) (*ProjectsProjectsActivityStreamListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsActivityStreamListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_activity_stream_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/activity_stream/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsActivityStreamListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsActivityStreamListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_activity_stream_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsCopyCreate projects projects copy create API
*/
func (a *Client) ProjectsProjectsCopyCreate(params *ProjectsProjectsCopyCreateParams) (*ProjectsProjectsCopyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsCopyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_copy_create",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{id}/copy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsCopyCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsCopyCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_copy_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsCopyList projects projects copy list API
*/
func (a *Client) ProjectsProjectsCopyList(params *ProjectsProjectsCopyListParams) (*ProjectsProjectsCopyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsCopyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_copy_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/copy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsCopyListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsCopyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_copy_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsCreate creates a project


Make a POST request to this resource with the following project
fields to create a new project:









* `name`: Name of this project. (string, required)
* `description`: Optional description of this project. (string, default=`""`)
* `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string, default=`""`)
* `scm_type`: Specifies the source control system used to store the project. (choice)
    - `""`: Manual (default)
    - `git`: Git
    - `hg`: Mercurial
    - `svn`: Subversion
    - `insights`: Red Hat Insights
* `scm_url`: The location where the project is stored. (string, default=`""`)
* `scm_branch`: Specific branch, tag or commit to checkout. (string, default=`""`)
* `scm_refspec`: For git projects, an additional refspec to fetch. (string, default=`""`)
* `scm_clean`: Discard any local changes before syncing the project. (boolean, default=`False`)
* `scm_delete_on_update`: Delete the project before syncing. (boolean, default=`False`)
* `credential`:  (id, default=``)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`)





* `organization`: The organization used to determine access to this template. (id, default=``)
* `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean, default=`False`)
* `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer, default=`0`)
* `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean, default=`False`)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string, default=`""`)
*/
func (a *Client) ProjectsProjectsCreate(params *ProjectsProjectsCreateParams) (*ProjectsProjectsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_create",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsDelete deletes a project


Make a DELETE request to this resource to delete this project.
*/
func (a *Client) ProjectsProjectsDelete(params *ProjectsProjectsDeleteParams) (*ProjectsProjectsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v2/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsInventoriesRead retrieves a project


Make GET request to this resource to retrieve a single project
record containing the following fields:

* `inventory_files`: Array of inventory files and directories available within this project, not comprehensive. (json)
*/
func (a *Client) ProjectsProjectsInventoriesRead(params *ProjectsProjectsInventoriesReadParams) (*ProjectsProjectsInventoriesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsInventoriesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_inventories_read",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/inventories/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsInventoriesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsInventoriesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_inventories_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsList lists projects


Make a GET request to this resource to retrieve the list of
projects.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of projects
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more project records.

## Results

Each project data structure includes the following fields:

* `id`: Database ID for this project. (integer)
* `type`: Data type for this project. (choice)
* `url`: URL for this project. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this project was created. (datetime)
* `modified`: Timestamp when this project was last modified. (datetime)
* `name`: Name of this project. (string)
* `description`: Optional description of this project. (string)
* `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string)
* `scm_type`: Specifies the source control system used to store the project. (choice)
    - `""`: Manual
    - `git`: Git
    - `hg`: Mercurial
    - `svn`: Subversion
    - `insights`: Red Hat Insights
* `scm_url`: The location where the project is stored. (string)
* `scm_branch`: Specific branch, tag or commit to checkout. (string)
* `scm_refspec`: For git projects, an additional refspec to fetch. (string)
* `scm_clean`: Discard any local changes before syncing the project. (boolean)
* `scm_delete_on_update`: Delete the project before syncing. (boolean)
* `credential`:  (id)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer)
* `scm_revision`: The last revision fetched by a project update (string)
* `last_job_run`:  (datetime)
* `last_job_failed`:  (boolean)
* `next_job_run`:  (datetime)
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
    - `never updated`: Never Updated
    - `ok`: OK
    - `missing`: Missing
* `organization`: The organization used to determine access to this template. (id)
* `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean)
* `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer)
* `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string)
* `last_update_failed`:  (boolean)
* `last_updated`:  (datetime)



## Sorting

To specify that projects are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsList(params *ProjectsProjectsListParams) (*ProjectsProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsNotificationTemplatesErrorCreate creates a notification template for a project


Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
project.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for a Project:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this project.

# Remove Notification Templates from this Project:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this project
 without deleting the notification template.
*/
func (a *Client) ProjectsProjectsNotificationTemplatesErrorCreate(params *ProjectsProjectsNotificationTemplatesErrorCreateParams) (*ProjectsProjectsNotificationTemplatesErrorCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsNotificationTemplatesErrorCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_notification_templates_error_create",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{id}/notification_templates_error/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsNotificationTemplatesErrorCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsNotificationTemplatesErrorCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_notification_templates_error_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsNotificationTemplatesErrorList lists notification templates for a project


Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
project.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsNotificationTemplatesErrorList(params *ProjectsProjectsNotificationTemplatesErrorListParams) (*ProjectsProjectsNotificationTemplatesErrorListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsNotificationTemplatesErrorListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_notification_templates_error_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/notification_templates_error/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsNotificationTemplatesErrorListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsNotificationTemplatesErrorListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_notification_templates_error_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsNotificationTemplatesStartedCreate creates a notification template for a project


Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
project.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for a Project:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this project.

# Remove Notification Templates from this Project:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this project
 without deleting the notification template.
*/
func (a *Client) ProjectsProjectsNotificationTemplatesStartedCreate(params *ProjectsProjectsNotificationTemplatesStartedCreateParams) (*ProjectsProjectsNotificationTemplatesStartedCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsNotificationTemplatesStartedCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_notification_templates_started_create",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{id}/notification_templates_started/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsNotificationTemplatesStartedCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsNotificationTemplatesStartedCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_notification_templates_started_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsNotificationTemplatesStartedList lists notification templates for a project


Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
project.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsNotificationTemplatesStartedList(params *ProjectsProjectsNotificationTemplatesStartedListParams) (*ProjectsProjectsNotificationTemplatesStartedListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsNotificationTemplatesStartedListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_notification_templates_started_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/notification_templates_started/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsNotificationTemplatesStartedListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsNotificationTemplatesStartedListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_notification_templates_started_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsNotificationTemplatesSuccessCreate creates a notification template for a project


Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
project.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for a Project:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this project.

# Remove Notification Templates from this Project:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this project
 without deleting the notification template.
*/
func (a *Client) ProjectsProjectsNotificationTemplatesSuccessCreate(params *ProjectsProjectsNotificationTemplatesSuccessCreateParams) (*ProjectsProjectsNotificationTemplatesSuccessCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsNotificationTemplatesSuccessCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_notification_templates_success_create",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{id}/notification_templates_success/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsNotificationTemplatesSuccessCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsNotificationTemplatesSuccessCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_notification_templates_success_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsNotificationTemplatesSuccessList lists notification templates for a project


Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
project.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsNotificationTemplatesSuccessList(params *ProjectsProjectsNotificationTemplatesSuccessListParams) (*ProjectsProjectsNotificationTemplatesSuccessListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsNotificationTemplatesSuccessListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_notification_templates_success_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/notification_templates_success/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsNotificationTemplatesSuccessListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsNotificationTemplatesSuccessListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_notification_templates_success_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsObjectRolesList lists roles for a project


Make a GET request to this resource to retrieve a list of
roles associated with the selected
project.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of roles
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more role records.

## Results

Each role data structure includes the following fields:

* `id`: Database ID for this role. (integer)
* `type`: Data type for this role. (choice)
* `url`: URL for this role. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `name`: Name of this role. (field)
* `description`: Optional description of this role. (field)



## Sorting

To specify that roles are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsObjectRolesList(params *ProjectsProjectsObjectRolesListParams) (*ProjectsProjectsObjectRolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsObjectRolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_object_roles_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/object_roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsObjectRolesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsObjectRolesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_object_roles_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsPartialUpdate updates a project


Make a PUT or PATCH request to this resource to update this
project.  The following fields may be modified:









* `name`: Name of this project. (string, required)
* `description`: Optional description of this project. (string, default=`""`)
* `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string, default=`""`)
* `scm_type`: Specifies the source control system used to store the project. (choice)
    - `""`: Manual (default)
    - `git`: Git
    - `hg`: Mercurial
    - `svn`: Subversion
    - `insights`: Red Hat Insights
* `scm_url`: The location where the project is stored. (string, default=`""`)
* `scm_branch`: Specific branch, tag or commit to checkout. (string, default=`""`)
* `scm_refspec`: For git projects, an additional refspec to fetch. (string, default=`""`)
* `scm_clean`: Discard any local changes before syncing the project. (boolean, default=`False`)
* `scm_delete_on_update`: Delete the project before syncing. (boolean, default=`False`)
* `credential`:  (id, default=``)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`)





* `organization`: The organization used to determine access to this template. (id, default=``)
* `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean, default=`False`)
* `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer, default=`0`)
* `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean, default=`False`)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string, default=`""`)










For a PATCH request, include only the fields that are being modified.
*/
func (a *Client) ProjectsProjectsPartialUpdate(params *ProjectsProjectsPartialUpdateParams) (*ProjectsProjectsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v2/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsPlaybooksRead retrieves project playbooks


Make GET request to this resource to retrieve a list of playbooks available
for a project.
*/
func (a *Client) ProjectsProjectsPlaybooksRead(params *ProjectsProjectsPlaybooksReadParams) (*ProjectsProjectsPlaybooksReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsPlaybooksReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_playbooks_read",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/playbooks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsPlaybooksReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsPlaybooksReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_playbooks_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsProjectUpdatesList lists project updates for a project


Make a GET request to this resource to retrieve a list of
project updates associated with the selected
project.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of project updates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more project update records.

## Results

Each project update data structure includes the following fields:

* `id`: Database ID for this project update. (integer)
* `type`: Data type for this project update. (choice)
* `url`: URL for this project update. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this project update was created. (datetime)
* `modified`: Timestamp when this project update was last modified. (datetime)
* `name`: Name of this project update. (string)
* `description`: Optional description of this project update. (string)
* `unified_job_template`:  (id)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `execution_node`: The node the job executed on. (string)
* `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string)
* `scm_type`: Specifies the source control system used to store the project. (choice)
    - `""`: Manual
    - `git`: Git
    - `hg`: Mercurial
    - `svn`: Subversion
    - `insights`: Red Hat Insights
* `scm_url`: The location where the project is stored. (string)
* `scm_branch`: Specific branch, tag or commit to checkout. (string)
* `scm_refspec`: For git projects, an additional refspec to fetch. (string)
* `scm_clean`: Discard any local changes before syncing the project. (boolean)
* `scm_delete_on_update`: Delete the project before syncing. (boolean)
* `credential`:  (id)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer)
* `scm_revision`: The SCM Revision discovered by this update for the given project and branch. (string)
* `project`:  (id)
* `job_type`:  (choice)
    - `run`: Run
    - `check`: Check
* `job_tags`: Parts of the project update playbook that will be run. (string)



## Sorting

To specify that project updates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsProjectUpdatesList(params *ProjectsProjectsProjectUpdatesListParams) (*ProjectsProjectsProjectUpdatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsProjectUpdatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_project_updates_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/project_updates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsProjectUpdatesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsProjectUpdatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_project_updates_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsRead retrieves a project


Make GET request to this resource to retrieve a single project
record containing the following fields:

* `id`: Database ID for this project. (integer)
* `type`: Data type for this project. (choice)
* `url`: URL for this project. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this project was created. (datetime)
* `modified`: Timestamp when this project was last modified. (datetime)
* `name`: Name of this project. (string)
* `description`: Optional description of this project. (string)
* `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string)
* `scm_type`: Specifies the source control system used to store the project. (choice)
    - `""`: Manual
    - `git`: Git
    - `hg`: Mercurial
    - `svn`: Subversion
    - `insights`: Red Hat Insights
* `scm_url`: The location where the project is stored. (string)
* `scm_branch`: Specific branch, tag or commit to checkout. (string)
* `scm_refspec`: For git projects, an additional refspec to fetch. (string)
* `scm_clean`: Discard any local changes before syncing the project. (boolean)
* `scm_delete_on_update`: Delete the project before syncing. (boolean)
* `credential`:  (id)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer)
* `scm_revision`: The last revision fetched by a project update (string)
* `last_job_run`:  (datetime)
* `last_job_failed`:  (boolean)
* `next_job_run`:  (datetime)
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
    - `never updated`: Never Updated
    - `ok`: OK
    - `missing`: Missing
* `organization`: The organization used to determine access to this template. (id)
* `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean)
* `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer)
* `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string)
* `last_update_failed`:  (boolean)
* `last_updated`:  (datetime)
*/
func (a *Client) ProjectsProjectsRead(params *ProjectsProjectsReadParams) (*ProjectsProjectsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_read",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsSchedulesCreate creates a schedule for a project


Make a POST request to this resource with the following schedule
fields to create a new schedule associated with this
project.


* `rrule`: A value representing the schedules iCal recurrence rule. (string, required)







* `name`: Name of this schedule. (string, required)
* `description`: Optional description of this schedule. (string, default=`""`)
* `extra_data`:  (json, default=`{}`)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``)
* `scm_branch`:  (string, default=`""`)
* `job_type`:  (choice)
    - `None`: --------- (default)
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string, default=`""`)
* `skip_tags`:  (string, default=`""`)
* `limit`:  (string, default=`""`)
* `diff_mode`:  (boolean, default=`None`)
* `verbosity`:  (choice)
    - `None`: --------- (default)
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)

* `enabled`: Enables processing of this schedule. (boolean, default=`True`)











POST requests to this resource must include a proper `rrule` value following
a particular format and conforming to subset of allowed rules.

The following lists the expected format and details of our rrules:

* DTSTART is required and must follow the following format: DTSTART:YYYYMMDDTHHMMSSZ
* DTSTART is expected to be in UTC
* INTERVAL is required
* SECONDLY is not supported
* TZID is not supported
* RRULE must precede the rule statements
* BYDAY is supported but not BYDAY with a numerical prefix
* BYYEARDAY and BYWEEKNO are not supported
* Only one rrule statement per schedule is supported
* COUNT must be < 1000

Here are some example rrules:

    "DTSTART:20500331T055000Z RRULE:FREQ=MINUTELY;INTERVAL=10;COUNT=5"
    "DTSTART:20240331T075000Z RRULE:FREQ=DAILY;INTERVAL=1;COUNT=1"
    "DTSTART:20140331T075000Z RRULE:FREQ=MINUTELY;INTERVAL=1;UNTIL=20230401T075000Z"
    "DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR"
    "DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO"
    "DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYMONTHDAY=6"
    "DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=4;BYDAY=SU"
    "DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=-1;BYDAY=MO,TU,WE,TH,FR"
    "DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=-1;BYDAY=MO,TU,WE,TH,FR,SA,SU"
    "DTSTART:20140331T075000Z RRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=4;BYMONTHDAY=1"
    "DTSTART:20140331T075000Z RRULE:FREQ=YEARLY;INTERVAL=1;BYSETPOS=-1;BYMONTH=8;BYDAY=SU"
    "DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=1;UNTIL=20230401T075000Z;BYDAY=MO,WE,FR"
    "DTSTART:20140331T075000Z RRULE:FREQ=HOURLY;INTERVAL=1;UNTIL=20230610T075000Z"
*/
func (a *Client) ProjectsProjectsSchedulesCreate(params *ProjectsProjectsSchedulesCreateParams) (*ProjectsProjectsSchedulesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsSchedulesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_schedules_create",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{id}/schedules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsSchedulesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsSchedulesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_schedules_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsSchedulesList lists schedules for a project


Make a GET request to this resource to retrieve a list of
schedules associated with the selected
project.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of schedules
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more schedule records.

## Results

Each schedule data structure includes the following fields:

* `rrule`: A value representing the schedules iCal recurrence rule. (string)
* `id`: Database ID for this schedule. (integer)
* `type`: Data type for this schedule. (choice)
* `url`: URL for this schedule. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this schedule was created. (datetime)
* `modified`: Timestamp when this schedule was last modified. (datetime)
* `name`: Name of this schedule. (string)
* `description`: Optional description of this schedule. (string)
* `extra_data`:  (json)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id)
* `scm_branch`:  (string)
* `job_type`:  (choice)
    - `None`: ---------
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string)
* `skip_tags`:  (string)
* `limit`:  (string)
* `diff_mode`:  (boolean)
* `verbosity`:  (choice)
    - `None`: ---------
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `unified_job_template`:  (id)
* `enabled`: Enables processing of this schedule. (boolean)
* `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime)
* `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime)
* `next_run`: The next time that the scheduled action will run. (datetime)
* `timezone`:  (field)
* `until`:  (field)



## Sorting

To specify that schedules are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsSchedulesList(params *ProjectsProjectsSchedulesListParams) (*ProjectsProjectsSchedulesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsSchedulesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_schedules_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/schedules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsSchedulesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsSchedulesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_schedules_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsScmInventorySourcesList lists inventory sources for a project


Make a GET request to this resource to retrieve a list of
inventory sources associated with the selected
project.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of inventory sources
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more inventory source records.

## Results

Each inventory source data structure includes the following fields:

* `id`: Database ID for this inventory source. (integer)
* `type`: Data type for this inventory source. (choice)
* `url`: URL for this inventory source. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this inventory source was created. (datetime)
* `modified`: Timestamp when this inventory source was last modified. (datetime)
* `name`: Name of this inventory source. (string)
* `description`: Optional description of this inventory source. (string)
* `source`:  (choice)
    - `file`: File, Directory or Script
    - `scm`: Sourced from a Project
    - `ec2`: Amazon EC2
    - `gce`: Google Compute Engine
    - `azure_rm`: Microsoft Azure Resource Manager
    - `vmware`: VMware vCenter
    - `satellite6`: Red Hat Satellite 6
    - `cloudforms`: Red Hat CloudForms
    - `openstack`: OpenStack
    - `rhv`: Red Hat Virtualization
    - `tower`: Ansible Tower
    - `custom`: Custom Script
* `source_path`:  (string)
* `source_script`:  (id)
* `source_vars`: Inventory source variables in YAML or JSON format. (string)
* `credential`: Cloud credential to use for inventory updates. (integer)
* `source_regions`:  (string)
* `instance_filters`: Comma-separated list of filter expressions (EC2 only). Hosts are imported when ANY of the filters match. (string)
* `group_by`: Limit groups automatically created from inventory source (EC2 only). (string)
* `overwrite`: Overwrite local groups and hosts from remote inventory source. (boolean)
* `overwrite_vars`: Overwrite local variables from remote inventory source. (boolean)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer)
* `verbosity`:  (choice)
    - `0`: 0 (WARNING)
    - `1`: 1 (INFO)
    - `2`: 2 (DEBUG)
* `last_job_run`:  (datetime)
* `last_job_failed`:  (boolean)
* `next_job_run`:  (datetime)
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
    - `never updated`: Never Updated
    - `none`: No External Source
* `inventory`:  (id)
* `update_on_launch`:  (boolean)
* `update_cache_timeout`:  (integer)
* `source_project`: Project containing inventory file used as source. (id)
* `update_on_project_update`:  (boolean)
* `last_update_failed`:  (boolean)
* `last_updated`:  (datetime)



## Sorting

To specify that inventory sources are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsScmInventorySourcesList(params *ProjectsProjectsScmInventorySourcesListParams) (*ProjectsProjectsScmInventorySourcesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsScmInventorySourcesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_scm_inventory_sources_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/scm_inventory_sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsScmInventorySourcesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsScmInventorySourcesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_scm_inventory_sources_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsTeamsList lists teams


Make a GET request to this resource to retrieve the list of
teams.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of teams
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more team records.

## Results

Each team data structure includes the following fields:

* `id`: Database ID for this team. (integer)
* `type`: Data type for this team. (choice)
* `url`: URL for this team. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this team was created. (datetime)
* `modified`: Timestamp when this team was last modified. (datetime)
* `name`: Name of this team. (string)
* `description`: Optional description of this team. (string)
* `organization`:  (id)



## Sorting

To specify that teams are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) ProjectsProjectsTeamsList(params *ProjectsProjectsTeamsListParams) (*ProjectsProjectsTeamsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsTeamsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_teams_list",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/teams/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsTeamsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsTeamsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_teams_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsUpdate0 updates a project


Make a PUT or PATCH request to this resource to update this
project.  The following fields may be modified:









* `name`: Name of this project. (string, required)
* `description`: Optional description of this project. (string, default=`""`)
* `local_path`: Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project. (string, default=`""`)
* `scm_type`: Specifies the source control system used to store the project. (choice)
    - `""`: Manual (default)
    - `git`: Git
    - `hg`: Mercurial
    - `svn`: Subversion
    - `insights`: Red Hat Insights
* `scm_url`: The location where the project is stored. (string, default=`""`)
* `scm_branch`: Specific branch, tag or commit to checkout. (string, default=`""`)
* `scm_refspec`: For git projects, an additional refspec to fetch. (string, default=`""`)
* `scm_clean`: Discard any local changes before syncing the project. (boolean, default=`False`)
* `scm_delete_on_update`: Delete the project before syncing. (boolean, default=`False`)
* `credential`:  (id, default=``)
* `timeout`: The amount of time (in seconds) to run before the task is canceled. (integer, default=`0`)





* `organization`: The organization used to determine access to this template. (id, default=``)
* `scm_update_on_launch`: Update the project when a job is launched that uses the project. (boolean, default=`False`)
* `scm_update_cache_timeout`: The number of seconds after the last project update ran that a new project update will be launched as a job dependency. (integer, default=`0`)
* `allow_override`: Allow changing the SCM branch or revision in a job template that uses this project. (boolean, default=`False`)
* `custom_virtualenv`: Local absolute file path containing a custom Python virtualenv to use (string, default=`""`)








For a PUT request, include **all** fields in the request.
*/
func (a *Client) ProjectsProjectsUpdate0(params *ProjectsProjectsUpdate0Params) (*ProjectsProjectsUpdate0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsUpdate0Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_update_0",
		Method:             "PUT",
		PathPattern:        "/api/v2/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsUpdate0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsUpdate0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_update_0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsUpdateCreate updates project


Make a GET request to this resource to determine if the project can be updated
from its SCM source.  The response will include the following field:

* `can_update`: Flag indicating if this project can be updated (boolean,
  read-only)

Make a POST request to this resource to update the project.  If the project
cannot be updated, a 405 status code will be returned.
*/
func (a *Client) ProjectsProjectsUpdateCreate(params *ProjectsProjectsUpdateCreateParams) (*ProjectsProjectsUpdateCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsUpdateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_update_create",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{id}/update/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsUpdateCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsUpdateCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_update_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectsProjectsUpdateRead updates project


Make a GET request to this resource to determine if the project can be updated
from its SCM source.  The response will include the following field:

* `can_update`: Flag indicating if this project can be updated (boolean,
  read-only)

Make a POST request to this resource to update the project.  If the project
cannot be updated, a 405 status code will be returned.
*/
func (a *Client) ProjectsProjectsUpdateRead(params *ProjectsProjectsUpdateReadParams) (*ProjectsProjectsUpdateReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectsUpdateReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Projects_projects_update_read",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{id}/update/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectsUpdateReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectsUpdateReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_projects_update_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

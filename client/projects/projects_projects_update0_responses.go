// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectsProjectsUpdate0Reader is a Reader for the ProjectsProjectsUpdate0 structure.
type ProjectsProjectsUpdate0Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsProjectsUpdate0Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsProjectsUpdate0OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectsProjectsUpdate0OK creates a ProjectsProjectsUpdate0OK with default headers values
func NewProjectsProjectsUpdate0OK() *ProjectsProjectsUpdate0OK {
	return &ProjectsProjectsUpdate0OK{}
}

/*ProjectsProjectsUpdate0OK handles this case with default header values.

OK
*/
type ProjectsProjectsUpdate0OK struct {
}

func (o *ProjectsProjectsUpdate0OK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{id}/][%d] projectsProjectsUpdate0OK ", 200)
}

func (o *ProjectsProjectsUpdate0OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*ProjectsProjectsUpdate0Body projects projects update0 body
swagger:model ProjectsProjectsUpdate0Body
*/
type ProjectsProjectsUpdate0Body struct {

	// Allow changing the SCM branch or revision in a job template that uses this project.
	AllowOverride string `json:"allow_override,omitempty"`

	// credential
	Credential int64 `json:"credential,omitempty"`

	// Local absolute file path containing a custom Python virtualenv to use
	CustomVirtualenv string `json:"custom_virtualenv,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project.
	LocalPath string `json:"local_path,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// The organization used to determine access to this template.
	Organization int64 `json:"organization,omitempty"`

	// Specific branch, tag or commit to checkout.
	ScmBranch string `json:"scm_branch,omitempty"`

	// Discard any local changes before syncing the project.
	ScmClean string `json:"scm_clean,omitempty"`

	// Delete the project before syncing.
	ScmDeleteOnUpdate string `json:"scm_delete_on_update,omitempty"`

	// For git projects, an additional refspec to fetch.
	ScmRefspec string `json:"scm_refspec,omitempty"`

	// Specifies the source control system used to store the project.
	ScmType string `json:"scm_type,omitempty"`

	// The number of seconds after the last project update ran that a new project update will be launched as a job dependency.
	ScmUpdateCacheTimeout int64 `json:"scm_update_cache_timeout,omitempty"`

	// Update the project when a job is launched that uses the project.
	ScmUpdateOnLaunch string `json:"scm_update_on_launch,omitempty"`

	// The location where the project is stored.
	ScmURL string `json:"scm_url,omitempty"`

	// The amount of time (in seconds) to run before the task is canceled.
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this projects projects update0 body
func (o *ProjectsProjectsUpdate0Body) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsProjectsUpdate0Body) validateName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsProjectsUpdate0Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsProjectsUpdate0Body) UnmarshalBinary(b []byte) error {
	var res ProjectsProjectsUpdate0Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

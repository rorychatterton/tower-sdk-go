// Code generated by go-swagger; DO NOT EDIT.

package ad_hoc_command_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ad hoc command events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ad hoc command events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AdHocCommandEventsAdHocCommandEventsList(params *AdHocCommandEventsAdHocCommandEventsListParams) (*AdHocCommandEventsAdHocCommandEventsListOK, error)

	AdHocCommandEventsAdHocCommandEventsRead(params *AdHocCommandEventsAdHocCommandEventsReadParams) (*AdHocCommandEventsAdHocCommandEventsReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AdHocCommandEventsAdHocCommandEventsList lists ad hoc command events


Make a GET request to this resource to retrieve the list of
ad hoc command events.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of ad hoc command events
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more ad hoc command event records.

## Results

Each ad hoc command event data structure includes the following fields:

* `id`: Database ID for this ad hoc command event. (integer)
* `type`: Data type for this ad hoc command event. (choice)
* `url`: URL for this ad hoc command event. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this ad hoc command event was created. (datetime)
* `modified`: Timestamp when this ad hoc command event was last modified. (datetime)
* `ad_hoc_command`:  (id)
* `event`:  (choice)
    - `runner_on_failed`: Host Failed
    - `runner_on_ok`: Host OK
    - `runner_on_unreachable`: Host Unreachable
    - `runner_on_skipped`: Host Skipped
    - `debug`: Debug
    - `verbose`: Verbose
    - `deprecated`: Deprecated
    - `warning`: Warning
    - `system_warning`: System Warning
    - `error`: Error
* `counter`:  (integer)
* `event_display`:  (string)
* `event_data`:  (json)
* `failed`:  (boolean)
* `changed`:  (boolean)
* `uuid`:  (string)
* `host`:  (id)
* `host_name`:  (string)
* `stdout`:  (string)
* `start_line`:  (integer)
* `end_line`:  (integer)
* `verbosity`:  (integer)



## Sorting

To specify that ad hoc command events are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) AdHocCommandEventsAdHocCommandEventsList(params *AdHocCommandEventsAdHocCommandEventsListParams) (*AdHocCommandEventsAdHocCommandEventsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandEventsAdHocCommandEventsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Command Events_ad_hoc_command_events_list",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_command_events/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandEventsAdHocCommandEventsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandEventsAdHocCommandEventsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Command Events_ad_hoc_command_events_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdHocCommandEventsAdHocCommandEventsRead retrieves an ad hoc command event


Make GET request to this resource to retrieve a single ad hoc command event
record containing the following fields:

* `id`: Database ID for this ad hoc command event. (integer)
* `type`: Data type for this ad hoc command event. (choice)
* `url`: URL for this ad hoc command event. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this ad hoc command event was created. (datetime)
* `modified`: Timestamp when this ad hoc command event was last modified. (datetime)
* `ad_hoc_command`:  (id)
* `event`:  (choice)
    - `runner_on_failed`: Host Failed
    - `runner_on_ok`: Host OK
    - `runner_on_unreachable`: Host Unreachable
    - `runner_on_skipped`: Host Skipped
    - `debug`: Debug
    - `verbose`: Verbose
    - `deprecated`: Deprecated
    - `warning`: Warning
    - `system_warning`: System Warning
    - `error`: Error
* `counter`:  (integer)
* `event_display`:  (string)
* `event_data`:  (json)
* `failed`:  (boolean)
* `changed`:  (boolean)
* `uuid`:  (string)
* `host`:  (id)
* `host_name`:  (string)
* `stdout`:  (string)
* `start_line`:  (integer)
* `end_line`:  (integer)
* `verbosity`:  (integer)
*/
func (a *Client) AdHocCommandEventsAdHocCommandEventsRead(params *AdHocCommandEventsAdHocCommandEventsReadParams) (*AdHocCommandEventsAdHocCommandEventsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdHocCommandEventsAdHocCommandEventsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Ad Hoc Command Events_ad_hoc_command_events_read",
		Method:             "GET",
		PathPattern:        "/api/v2/ad_hoc_command_events/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdHocCommandEventsAdHocCommandEventsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdHocCommandEventsAdHocCommandEventsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ad Hoc Command Events_ad_hoc_command_events_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package notification_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notification templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notification templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	NotificationTemplatesNotificationTemplatesCopyCreate(params *NotificationTemplatesNotificationTemplatesCopyCreateParams) (*NotificationTemplatesNotificationTemplatesCopyCreateCreated, error)

	NotificationTemplatesNotificationTemplatesCopyList(params *NotificationTemplatesNotificationTemplatesCopyListParams) (*NotificationTemplatesNotificationTemplatesCopyListOK, error)

	NotificationTemplatesNotificationTemplatesCreate(params *NotificationTemplatesNotificationTemplatesCreateParams) (*NotificationTemplatesNotificationTemplatesCreateCreated, error)

	NotificationTemplatesNotificationTemplatesDelete(params *NotificationTemplatesNotificationTemplatesDeleteParams) (*NotificationTemplatesNotificationTemplatesDeleteNoContent, error)

	NotificationTemplatesNotificationTemplatesList(params *NotificationTemplatesNotificationTemplatesListParams) (*NotificationTemplatesNotificationTemplatesListOK, error)

	NotificationTemplatesNotificationTemplatesNotificationsList(params *NotificationTemplatesNotificationTemplatesNotificationsListParams) (*NotificationTemplatesNotificationTemplatesNotificationsListOK, error)

	NotificationTemplatesNotificationTemplatesPartialUpdate(params *NotificationTemplatesNotificationTemplatesPartialUpdateParams) (*NotificationTemplatesNotificationTemplatesPartialUpdateOK, error)

	NotificationTemplatesNotificationTemplatesRead(params *NotificationTemplatesNotificationTemplatesReadParams) (*NotificationTemplatesNotificationTemplatesReadOK, error)

	NotificationTemplatesNotificationTemplatesTestCreate(params *NotificationTemplatesNotificationTemplatesTestCreateParams) (*NotificationTemplatesNotificationTemplatesTestCreateCreated, error)

	NotificationTemplatesNotificationTemplatesUpdate(params *NotificationTemplatesNotificationTemplatesUpdateParams) (*NotificationTemplatesNotificationTemplatesUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NotificationTemplatesNotificationTemplatesCopyCreate notification templates notification templates copy create API
*/
func (a *Client) NotificationTemplatesNotificationTemplatesCopyCreate(params *NotificationTemplatesNotificationTemplatesCopyCreateParams) (*NotificationTemplatesNotificationTemplatesCopyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesCopyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_copy_create",
		Method:             "POST",
		PathPattern:        "/api/v2/notification_templates/{id}/copy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesCopyCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesCopyCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_copy_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesCopyList notification templates notification templates copy list API
*/
func (a *Client) NotificationTemplatesNotificationTemplatesCopyList(params *NotificationTemplatesNotificationTemplatesCopyListParams) (*NotificationTemplatesNotificationTemplatesCopyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesCopyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_copy_list",
		Method:             "GET",
		PathPattern:        "/api/v2/notification_templates/{id}/copy/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesCopyListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesCopyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_copy_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesCreate creates a notification template


Make a POST request to this resource with the following notification template
fields to create a new notification template:









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)
*/
func (a *Client) NotificationTemplatesNotificationTemplatesCreate(params *NotificationTemplatesNotificationTemplatesCreateParams) (*NotificationTemplatesNotificationTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_create",
		Method:             "POST",
		PathPattern:        "/api/v2/notification_templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesDelete deletes a notification template


Make a DELETE request to this resource to delete this notification template.
*/
func (a *Client) NotificationTemplatesNotificationTemplatesDelete(params *NotificationTemplatesNotificationTemplatesDeleteParams) (*NotificationTemplatesNotificationTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v2/notification_templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesList lists notification templates


Make a GET request to this resource to retrieve the list of
notification templates.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) NotificationTemplatesNotificationTemplatesList(params *NotificationTemplatesNotificationTemplatesListParams) (*NotificationTemplatesNotificationTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_list",
		Method:             "GET",
		PathPattern:        "/api/v2/notification_templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesNotificationsList lists notifications for a notification template


Make a GET request to this resource to retrieve a list of
notifications associated with the selected
notification template.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notifications
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification records.

## Results

Each notification data structure includes the following fields:

* `id`: Database ID for this notification. (integer)
* `type`: Data type for this notification. (choice)
* `url`: URL for this notification. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification was created. (datetime)
* `modified`: Timestamp when this notification was last modified. (datetime)
* `notification_template`:  (id)
* `error`:  (string)
* `status`:  (choice)
    - `pending`: Pending
    - `successful`: Successful
    - `failed`: Failed
* `notifications_sent`:  (integer)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `recipients`:  (string)
* `subject`:  (string)
* `body`: Notification body (json)



## Sorting

To specify that notifications are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
*/
func (a *Client) NotificationTemplatesNotificationTemplatesNotificationsList(params *NotificationTemplatesNotificationTemplatesNotificationsListParams) (*NotificationTemplatesNotificationTemplatesNotificationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesNotificationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_notifications_list",
		Method:             "GET",
		PathPattern:        "/api/v2/notification_templates/{id}/notifications/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesNotificationsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesNotificationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_notifications_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesPartialUpdate updates a notification template


Make a PUT or PATCH request to this resource to update this
notification template.  The following fields may be modified:









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








For a PATCH request, include only the fields that are being modified.
*/
func (a *Client) NotificationTemplatesNotificationTemplatesPartialUpdate(params *NotificationTemplatesNotificationTemplatesPartialUpdateParams) (*NotificationTemplatesNotificationTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v2/notification_templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesRead retrieves a notification template


Make GET request to this resource to retrieve a single notification template
record containing the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)
*/
func (a *Client) NotificationTemplatesNotificationTemplatesRead(params *NotificationTemplatesNotificationTemplatesReadParams) (*NotificationTemplatesNotificationTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_read",
		Method:             "GET",
		PathPattern:        "/api/v2/notification_templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesTestCreate tests a notification template
*/
func (a *Client) NotificationTemplatesNotificationTemplatesTestCreate(params *NotificationTemplatesNotificationTemplatesTestCreateParams) (*NotificationTemplatesNotificationTemplatesTestCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesTestCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_test_create",
		Method:             "POST",
		PathPattern:        "/api/v2/notification_templates/{id}/test/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesTestCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesTestCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_test_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationTemplatesNotificationTemplatesUpdate updates a notification template


Make a PUT or PATCH request to this resource to update this
notification template.  The following fields may be modified:









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `hipchat`: HipChat
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)






For a PUT request, include **all** fields in the request.
*/
func (a *Client) NotificationTemplatesNotificationTemplatesUpdate(params *NotificationTemplatesNotificationTemplatesUpdateParams) (*NotificationTemplatesNotificationTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationTemplatesNotificationTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Notification Templates_notification_templates_update",
		Method:             "PUT",
		PathPattern:        "/api/v2/notification_templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationTemplatesNotificationTemplatesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationTemplatesNotificationTemplatesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notification Templates_notification_templates_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
